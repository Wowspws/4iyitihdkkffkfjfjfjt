-- LocalScript in StarterPlayerScripts or StarterCharacterScripts

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Function to play the animation
local function playAnimation(animationId)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://" .. tostring(animationId)
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play()
    end
end

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Mountain Destroying Punch"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Merciless Barrage"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Black Flash"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Upper Slam"

local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")

local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local playerGui = player:WaitForChild("PlayerGui")

local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Duration of the cutscene and fade
local cutsceneDuration = 1
local fadeDuration = 1

-- Create a ScreenGui and Frame for the fade effect
local screenGui = Instance.new("ScreenGui", playerGui)
local frame = Instance.new("Frame", screenGui)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.Size = UDim2.new(900, 0, 900, 0) -- Set the size to be 900 times bigger
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.BackgroundTransparency = 1

-- Create a TextLabel for the "Super Saiyan" text in Chinese
local textLabel = Instance.new("TextLabel", screenGui)
textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
textLabel.Size = UDim2.new(0.2, 0, 0.1, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "五条"
textLabel.TextColor3 = Color3.new(1, 0, 0) -- Set text color to red
textLabel.TextScaled = true
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextTransparency = 1

-- TweenInfo for the fade effect
local fadeInInfo = TweenInfo.new(
    fadeDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

local fadeOutInfo = TweenInfo.new(
    fadeDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

-- TweenInfo for the camera movement
local tweenInfo = TweenInfo.new(
    cutsceneDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

-- Initial and final camera CFrame
local initialCFrame = humanoidRootPart.CFrame * CFrame.new(0, -5, 0)
local finalCFrame = humanoidRootPart.CFrame * CFrame.new(0, 2, 2) * CFrame.Angles(0, math.rad(180), 0)

-- Create the Tween for the camera
local cameraTween = TweenService:Create(camera, tweenInfo, {CFrame = finalCFrame})

-- Create Tweens for the fade effect
local fadeInTween = TweenService:Create(frame, fadeInInfo, {BackgroundTransparency = 0})
local fadeOutTween = TweenService:Create(frame, fadeOutInfo, {BackgroundTransparency = 1})

-- Create Tweens for the text transparency
local textFadeInTween = TweenService:Create(textLabel, fadeInInfo, {TextTransparency = 0})
local textFadeOutTween = TweenService:Create(textLabel, fadeOutInfo, {TextTransparency = 1})

-- Function to play the camera cutscene and fade effect
local function playCutscene()
    -- Set initial camera position
    camera.CFrame = initialCFrame
    
    -- Play the fade-in tween for the black screen and text
    fadeInTween:Play()
    textFadeInTween:Play()
    fadeInTween.Completed:Wait()
    
    -- Play the camera tween
    cameraTween:Play()
    cameraTween.Completed:Wait()
    
    -- Play the fade-out tween for the black screen and text
    fadeOutTween:Play()
    textFadeOutTween:Play()
    fadeOutTween.Completed:Wait()
    
    -- Reset the camera to its default behavior
    camera.CameraSubject = character:WaitForChild("Humanoid")
end

-- Start the cutscene
playCutscene()

-- Define the animation IDs
local targetAnimationId = "10469493270" -- m1 1
local animationId = "17889458563" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469630950" -- m1 2
local animationId = "17889461810" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469639222" -- m1 3
local animationId = "17889471098" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469643643" -- m1 4
local animationId = "17889290569" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10479335397" -- Sukuna Dash
local animationId = "17838006839" -- The ID of the animation you want to play
local animationSpeed = 2.35 -- Adjust the speed here (2 means 2x faster, 1 is normal speed)

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation

        -- Get the player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to find a descendant recursively by name
local function findDescendant(parent, name)
    local child = parent:FindFirstChild(name)
    if not child then
        for _, descendant in ipairs(parent:GetChildren()) do
            child = findDescendant(descendant, name)
            if child then
                break
            end
        end
    end
    return child
end

-- Function to duplicate a ParticleEmitter
local function duplicateEmitter(originalEmitter)
    local duplicate = originalEmitter:Clone()
    duplicate.Parent = originalEmitter.Parent
    duplicate.Rate = 150  -- Set the rate of the duplicated emitter to 150 initially
    return duplicate
end

-- Invisibility settings
local invisibilityDuration = .55 -- Time the player stays invisible (in seconds)
local invisibleTransparency = 1 -- Transparency when invisible (0 is fully visible, 1 is fully invisible)
local visibleTransparency = 0 -- Transparency when visible

-- Parts to exclude from invisibility
local excludedParts = {
    "HumanoidRootPart",
    "Hitbox_RightArm",
    "Hitbox_RightLeg",
    "Hitbox_LeftLeg",
    "Hitbox_LeftArm",
    "camera",
    "camerarootpart",
    "letterboxtop",
    "letterboxbot",
}

-- Function to check if a part should be excluded
local function isExcluded(part)
    for _, name in ipairs(excludedParts) do
        if part.Name == name then
            return true
        end
    end
    return false
end

-- Function to turn the player invisible
local function turnInvisible()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and not isExcluded(part) then
            part.Transparency = invisibleTransparency
        elseif (part:IsA("Decal") or part:IsA("Texture")) and not isExcluded(part.Parent) then
            part.Transparency = 1 -- Hide textures/decals fully
        end
    end
end

-- Function to turn the player visible again
local function turnVisible()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and not isExcluded(part) then
            part.Transparency = visibleTransparency
        elseif (part:IsA("Decal") or part:IsA("Texture")) and not isExcluded(part.Parent) then
            part.Transparency = 0 -- Show textures/decals again
        end
    end
end

-- Main logic
local replicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder = replicatedStorage:WaitForChild("Resources", 2) -- Wait for 2 seconds if not immediately found
if resourcesFolder then
    local kjEffectsFolder = resourcesFolder:FindFirstChild("KJEffects")
    if kjEffectsFolder then
        local tpThingEmitter = findDescendant(kjEffectsFolder, "tpthing")
        if tpThingEmitter and tpThingEmitter:IsA("ParticleEmitter") then
            -- Duplicate the emitter
            local duplicatedEmitter = duplicateEmitter(tpThingEmitter)

            -- Parent the duplicated emitter to HumanoidRootPart
            duplicatedEmitter.Parent = humanoidRootPart

            -- Make the player invisible
            turnInvisible()
            wait(invisibilityDuration)
            turnVisible()

            -- Set the rate of the duplicated emitter to 0 after invisibility duration
            duplicatedEmitter.Rate = 0
        else
            warn("Could not find tpthing ParticleEmitter or it is not a ParticleEmitter.")
        end
    else
        warn("Could not find KJEffects folder inside Resources.")
    end
else
    warn("Could not find Resources folder inside ReplicatedStorage.")
end

        animationTrack.Speed = animationSpeed -- Set the animation speed
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
        
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10468665991" -- Mountain Destroying Punch
local animationId = "18249294373" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 3 -- Time in seconds
local animationSpeed = .8 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

                    -- Emit particles
        local function emitParticles(finalPart)
            for _, child in ipairs(finalPart:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    child:Emit(1) -- Emit particles
                end
            end
        end

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15955393872" -- The ID of the animation you want to detect
local animationId = "15943915877" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 4 -- Time in seconds
local animationSpeed = .9 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10470104242" -- Ground Slam
local animationId = "17858878027" -- The ID of the animation you want to play
local animationSpeed = 2 -- Set the speed multiplier (2x speed in this case)

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(animationSpeed) -- Adjust the speed of the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10471336737" -- Black Flash Sukuna
local animationId = "18896127525" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 2 -- Time in seconds
local animationSpeed = 3.1 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 4) -- Adjust the animation speed (default is 1 if not provided)

            task.wait(.4)
-- get the vfx from Replicated Storage
local effect = game.ReplicatedStorage.Resources.KJEffects.DropkickExtra["firstHit"].Attachment:Clone()

-- the parent of the vfx
effect.Parent = game.Players.LocalPlayer.Character.Hitbox_RightArm

-- emitting za partcle
for _, child in ipairs(effect:GetChildren()) do
    if child:IsA("ParticleEmitter") then
        child:Emit(5) -- Emit 1 particle
    end
end

                local ss = game:GetService("SoundService")
local Sound = Instance.new("Sound", ss)
Sound.SoundId = "rbxassetid://18443813318"
Sound.Volume = 2
Sound:Play()

                local ss = game:GetService("SoundService")
local Sound = Instance.new("Sound", ss)
Sound.SoundId = "rbxassetid://6339560679"
Sound.Volume = 2
Sound:Play()

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Wait for 0.1 seconds before performing the desired action
        wait(0.1)
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12983333733" -- The ID of the animation you want to detect
local animationId = "16746824621" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 0.35 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- SoundPlayer.lua

-- Wait for the sound objects to exist in SoundService
local deliriousSound = game:GetService("SoundService"):WaitForChild("Thunderclap")
local honoredOneSound = game:GetService("SoundService"):WaitForChild("HonoredOne")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if deliriousSound then
                deliriousSound.Volume = deliriousSound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if deliriousSound then
        -- Customize sound properties
        deliriousSound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        deliriousSound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        deliriousSound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                deliriousSound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Delirious sound not found!")
    end
end

-- Function to constantly check if 'HonoredOne' is playing and stop it when 'Delirious' starts
local function monitorHonoredOne()
    game:GetService("RunService").RenderStepped:Connect(function()
        if deliriousSound.IsPlaying and honoredOneSound.IsPlaying then
            honoredOneSound:Stop() -- Stop 'HonoredOne' if 'Delirious' is playing
        end
    end)
end

-- Call the function to customize and play the 'Delirious' sound
-- Parameters: Start at 74.5 seconds, maximum volume 10, fade in for 3 seconds, fade out after 15 seconds, and fade out over 5 seconds
customizeAndPlaySound(201.5, 3, 3, 20, 5)

-- Start continuously checking if 'HonoredOne' is playing
monitorHonoredOne()

        task.wait(1.5)

-- get the vfx from Replicated Storage
local effect = game.ReplicatedStorage.Resources.FiveSeasonsFX.JumpFX["JumpFX"].Attachment:Clone()

-- the parent of the vfx
effect.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart

-- emitting za partcle
for _, child in ipairs(effect:GetChildren()) do
    if child:IsA("ParticleEmitter") then
        child:Emit(2) -- Emit 1 particle
    end
end

wait(0)

        -- Chat messages with Japanese translations
        chatMessage("You Humans Really Are Pathetic || 君たち人間は本当に哀れだ")
        wait(.5) -- Wait for 1 second before sending the next chat message

            local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Mountain Destroying Punch"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Merciless Barrage"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Black Flash"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Upper Slam"

local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")

local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

        chatMessage("Prepare Yourselves! || 準備をしてください!")
        wait(1) -- Wait for 1 second before sending the next chat message

        wait(3.5) -- Wait for 1 second before sending the next chat message
        chatMessage("Strong Dismantle || 強力な解体")

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character

local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end

player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "11343318134" -- The ID of the animation you want to detect
local animationId = "18459220516" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 1 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

fixCamera()

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

           -- SoundPlayer.lua

-- Wait for the sound object to exist in SoundService
local sound = game:GetService("SoundService"):WaitForChild("Thunderclap")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if sound then
                sound.Volume = sound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if sound then
        -- Customize sound properties
        sound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        sound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        sound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                sound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Sound not found!")
    end
end

-- Call the function to customize and play the sound
-- Parameters: Start at 74.5 seconds, maximum volume 10, fade in for 3 seconds, fade out after 10 seconds, and fade out over 5 seconds
customizeAndPlaySound(82, 2, 5, 10, 5)

    local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Mountain Destroying Punch"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Merciless Barrage"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Black Flash"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Upper Slam"

local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")

local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)
        
        -- Chat messages with Japanese translations
        chatMessage("Domain Expansion Maleovolent Shrine || ドメイン拡張悪意の神社")
        wait(1) -- Wait for 1 second before sending the next chat message

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action

        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "13927612951" -- The ID of the animation you want to detect
local animationId = "18897563773" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 1 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Mountain Destroying Punch"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Merciless Barrage"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Black Flash"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Upper Slam"

local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")

local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)
        
        -- Chat messages with Japanese translations
        chatMessage("Come On! || 来て！")

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action

        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "11365563255" -- The ID of the animation you want to detect
local animationId = "13071982935" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 0.7 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Mountain Destroying Punch"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Merciless Barrage"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Black Flash"

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName

ToolName.Text = "Upper Slam"

local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")

local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

-- Define floating settings for below 50% health
local floatName = "FloatPart"
local floatOffset = -5
local floatDelay = 0
local floatSpeed = 0.3
local floatDuration = 1
local vanishDuration = 8  -- Duration to pause before disappearing

-- Get the local player and services
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait() -- Wait for character to load
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function floatCharacter()
    task.delay(floatDelay, function()
        -- Create the floating part
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(555, 1, 555)
        Float.Anchored = true
        
        local initialCFrame = character:FindFirstChild("HumanoidRootPart").CFrame
        Float.CFrame = initialCFrame * CFrame.new(0, floatOffset, 0)
        
        local floatValue = 0
        local startTime = tick()
        
        -- Start floating logic
        local function float()
            while tick() - startTime < floatDuration do
                floatValue = floatValue + floatSpeed
                Float.CFrame = initialCFrame * CFrame.new(0, floatOffset + floatValue, 0)
                task.wait(0.01)
            end
            
            -- Pause before disappearing
            task.delay(vanishDuration, function()
                Float:Destroy()
            end)
        end
        
        float()  -- Call the float function to start the floating logic
    end)
end

floatCharacter()

           -- SoundPlayer.lua

-- Wait for the sound object to exist in SoundService
local sound = game:GetService("SoundService"):WaitForChild("Thunderclap")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if sound then
                sound.Volume = sound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if sound then
        -- Customize sound properties
        sound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        sound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        sound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                sound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Sound not found!")
    end
end

-- Call the function to customize and play the sound
-- Parameters: Start at 74.5 seconds, maximum volume 10, fade in for 3 seconds, fade out after 10 seconds, and fade out over 5 seconds
customizeAndPlaySound(90.5, 1, 5, 15, 5)

-- get the vfx from Replicated Storage
local effect = game.ReplicatedStorage.Resources.FiveSeasonsFX.JumpFX["JumpFX"].Attachment:Clone()

-- the parent of the vfx
effect.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart

-- emitting za partcle
for _, child in ipairs(effect:GetChildren()) do
    if child:IsA("ParticleEmitter") then
        child:Emit(2) -- Emit 1 particle
    end
end

        -- Chat messages with Japanese translations
        chatMessage("Scale Of The Dragon || ドラゴンの鱗")
        wait(1) -- Wait for 1 second before sending the next chat message
        chatMessage("Recoil || 反動")
        wait(1) -- Wait for 1 second before sending the next chat message
        chatMessage("Twin Meteors || ツインメテオール")
        wait(4) -- Wait for 1 second before sending the next chat message
        chatMessage("World Cutting Slash || ワールドカットスラッシュ")

        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action

        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12447707844" -- The ID of the animation you want to detect
local above50AnimationId = "17464923657" -- Animation ID for above 50% health
local below50AnimationId = "15507137974" -- Animation ID for below 50% health

-- Define durations and speeds
local above50AnimationDuration = 2
local above50AnimationSpeed = .6
local below50AnimationDuration = 10
local below50AnimationSpeed = 1.5

-- Define floating settings for below 50% health
local floatName = "FloatPart"
local floatOffset = -10
local floatDelay = 0
local floatSpeed = 0.2
local floatDuration = 6
local vanishDuration = 0

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, animationId, speed, duration)
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if animator then
            local animationTrack = animator:LoadAnimation(animation)
            animationTrack:Play()
            animationTrack:AdjustSpeed(speed or 1)

            -- SoundPlayer.lua

-- Wait for the sound objects to exist in SoundService
local sound = game:GetService("SoundService"):WaitForChild("Thunderclap")
local honoredSound = game:GetService("SoundService"):WaitForChild("HonoredOne")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if sound then
                sound.Volume = sound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if sound then
        -- Customize sound properties
        sound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        sound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        sound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                sound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Sound not found!")
    end
end

-- Function to continuously check if 'HonoredOne' is playing and stop 'Delirious'
local function monitorHonoredOne()
    -- Run in a separate thread to constantly check the state of 'HonoredOne'
    task.spawn(function()
        while true do
            if honoredSound.IsPlaying and sound.IsPlaying then
                sound:Stop() -- Stop 'Delirious' sound when 'HonoredOne' starts playing
            end
            task.wait(0.1) -- Check every 0.1 seconds to reduce performance impact
        end
    end)
end

-- Call the function to customize and play the 'Delirious' sound
-- Parameters: Start at 33 seconds, maximum volume 2, fade in for 2 seconds, fade out after 40 seconds, and fade out over 5 seconds
customizeAndPlaySound(70, 1, 2, 30, 5)

-- Start monitoring 'HonoredOne' to stop 'Delirious' if it plays
monitorHonoredOne()

            -- If below 50%, float the character
            if speed == below50AnimationSpeed then
                local function floatCharacter()
                    task.wait(floatDelay)

                    if not character:FindFirstChild(floatName) then
                        task.spawn(function()
                            local Float = Instance.new('Part')
                            Float.Name = floatName
                            Float.Parent = character
                            Float.Transparency = 1
                            Float.Size = Vector3.new(350, 1, 350)
                            Float.Anchored = true
                            local initialCFrame = character:FindFirstChild("HumanoidRootPart").CFrame
                            Float.CFrame = initialCFrame * CFrame.new(0, floatOffset, 0)
                            local floatValue = 0
                            local isFloating = true

                            local startTime = tick()
                            while isFloating and tick() - startTime < floatDuration do
                                floatValue = floatValue + floatSpeed
                                Float.CFrame = initialCFrame * CFrame.new(0, floatOffset + floatValue, 0)
                                task.wait(0.01)
                            end

                            isFloating = false
                            task.delay(vanishDuration, function()
                                Float:Destroy()
                            end)
                        end)
                    end
                end

                floatCharacter()

                chatMessage("Foolish Humans Did You Really Think You Could Beat Me? || 愚かな人間よ、本当に私に勝てると思ったのか？")

            else

                chatMessage("Let's Start By Peeling Of Those Scales! || まずは鱗を剥がすところから始めましょう！")

                                local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local camera = game.Workspace.CurrentCamera

-- Wait for the character's HumanoidRootPart
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Store the original camera position (CFrame)
local originalCameraCFrame = camera.CFrame

-- Function to keep the player looking in the desired direction
local function updatePlayerDirection()
    local fixedDirection = Vector3.new(0.3, 0, 1) -- Adjust this vector to change the facing direction
    humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position, humanoidRootPart.Position + fixedDirection)
end

-- Set the camera to Scriptable mode to control it manually
camera.CameraType = Enum.CameraType.Scriptable

-- Define a variable to track whether the camera is reset
local cameraReset = false

-- Function to spawn the camera at a fixed position relative to the player
local function setCameraPosition()
    -- Define a fixed offset from the HumanoidRootPart
    local cameraOffset = Vector3.new(3, 3, 5) -- Adjust these values to position the camera
    local cameraPosition = humanoidRootPart.Position + cameraOffset
    
    -- Set the camera's CFrame to look at the player's position
    camera.CFrame = CFrame.new(cameraPosition, humanoidRootPart.Position)
end

-- Update the camera and player facing direction every frame until camera reset
local runService = game:GetService("RunService")
local connection
connection = runService.RenderStepped:Connect(function()
    if not cameraReset then
        setCameraPosition()
        updatePlayerDirection()
    else
        connection:Disconnect()
    end
end)

-- Use task.delay to reset the camera after 2 seconds
task.delay(2, function()
    -- Reset the camera back to the original CFrame
    camera.CFrame = originalCameraCFrame
    camera.CameraType = Enum.CameraType.Custom
    
    -- Mark the camera as reset, which will stop the update loop
    cameraReset = true
end)

-- Use task.delay to reset the camera after 2 seconds
task.delay(2, function()
    -- Reset the camera back to the original CFrame
    camera.CFrame = originalCameraCFrame
    camera.CameraType = Enum.CameraType.Custom
end)

task.wait(.6)

local aqua = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)), -- cyan
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)) -- light aqua
}

local function emitParticles(effect, parent, duration)
    local fx = effect:Clone()
    fx.Parent = parent
    for _, child in ipairs(fx:GetChildren()) do
        if child:IsA("ParticleEmitter") then
            child.Color = aqua -- Change particle color to aqua
            child:Emit(5) -- Emit particles
        end
    end
    -- Stop emitting after duration
    delay(duration, function()
        for _, child in ipairs(fx:GetChildren()) do
            if child:IsA("ParticleEmitter") then
                child.Enabled = false -- Stop emission
            end
        end
    end)
end

-- Right Arm FX
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.Attachment, game.Players.LocalPlayer.Character["Right Arm"], 2)
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.a, game.Players.LocalPlayer.Character["Right Arm"], 2)
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmFX, game.Players.LocalPlayer.Character["Right Arm"], 2)

-- Head FX
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].EyeEmit, game.Players.LocalPlayer.Character["Head"], 2)

-- Left Arm FX
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.Attachment, game.Players.LocalPlayer.Character["Left Arm"], 2)
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.a, game.Players.LocalPlayer.Character["Left Arm"], 2)
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmFX, game.Players.LocalPlayer.Character["Left Arm"], 2)

-- SoundPlayer.lua

-- Wait for the sound objects to exist in SoundService
local sound = game:GetService("SoundService"):WaitForChild("Thunderclap")
local honoredSound = game:GetService("SoundService"):WaitForChild("HonoredOne")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if sound then
                sound.Volume = sound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if sound then
        -- Customize sound properties
        sound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        sound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        sound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                sound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Sound not found!")
    end
end

-- Function to continuously check if 'HonoredOne' is playing and stop 'Thunderclap'
local function monitorHonoredOne()
    -- Run in a separate thread to constantly check the state of 'HonoredOne'
    task.spawn(function()
        while true do
            if honoredSound.IsPlaying and sound.IsPlaying then
                sound:Stop() -- Stop 'Thunderclap' sound when 'HonoredOne' starts playing
            end
            task.wait(0.1) -- Check every 0.1 seconds to reduce performance impact
        end
    end)
end

-- Call the function to customize and play the 'Thunderclap' sound
-- Parameters: Start at 33 seconds, maximum volume 2, fade in for 2 seconds, fade out after 40 seconds, and fade out over 5 seconds
customizeAndPlaySound(70, 1, 2, 30, 5)

-- Start monitoring 'HonoredOne' to stop 'Delirious' if it plays
monitorHonoredOne()

local soundId = 7369744751 -- Correct sound ID

-- Create a new Sound instance
local sound = Instance.new("Sound")
sound.Name = "Dropkick Miss"
sound.SoundId = "rbxassetid://" .. soundId
sound.Volume = 10
sound.Pitch = 1.0 -- Pitch set to 1.0
sound.PlaybackSpeed = 1.0 -- Adjusted playback speed

-- Parent the sound to Workspace
sound.Parent = workspace

-- Play the sound
sound:Play()

            end

                task.wait(1.5)

            -- Update tool names
            local hotbar = player.PlayerGui:FindFirstChild("Hotbar")
            if hotbar then
                local backpack = hotbar:FindFirstChild("Backpack")
                if backpack then
                    local hotbarFrame = backpack:FindFirstChild("Hotbar")
                    if hotbarFrame then
                        hotbarFrame:FindFirstChild("1").Base.ToolName.Text = "Domain Expansion"
                        hotbarFrame:FindFirstChild("2").Base.ToolName.Text = "World Cutting Slash"
                        hotbarFrame:FindFirstChild("3").Base.ToolName.Text = "Strong Dismantle Blast"
                        hotbarFrame:FindFirstChild("4").Base.ToolName.Text = "Come On!"
                    end
                end
            end
        end
    end
end
   
-- Function to stop the target animation and play the appropriate animation based on health
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop()

        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local healthPercent = humanoid.Health / humanoid.MaxHealth
                if healthPercent > 0.5 then
                    playAnimation(character, above50AnimationId, above50AnimationSpeed, above50AnimationDuration)
                else
                    playAnimation(character, below50AnimationId, below50AnimationSpeed, below50AnimationDuration)
                end
            end
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10466974800" -- The ID of the animation you want to detect
local animationId = "18897695481" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 1.3 -- Time in seconds
local animationSpeed = 2.5 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Set the time position to start the animation 1 second earlier
        animationTrack.TimePosition = 0 -- Start 1 second earlier

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else
        warn("Humanoid not found in character")
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Wait for 0.1 seconds before performing the desired action
        wait(0.1)
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else
    player.CharacterAdded:Connect(onCharacterAdded)
end

-- Define the animation IDs
local targetAnimationId = "12510170988" -- Super Stomp
local animationId1 = "12467789963 " -- The ID of the first animation to play
local animationId2 = "" -- The ID of the second animation to play

-- Define settings
local animationDuration = 2 -- Duration in seconds for each animation to play
local animationSpeed = 1.6 -- Speed of the animations
local anchorDuration = 1 -- Duration in seconds to keep the player anchored

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to create and play the animation with a specified speed
local function playAnimationsSequentially(character, speed, duration)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                return animationTrack
            else

                return nil
            end
        end

        local track1 = playAnimation(animationId1)
        if track1 then
            task.wait(duration)
            track1:Stop()

            local track2 = playAnimation(animationId2)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end

    else

    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)
            playAnimationsSequentially(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469630950" -- The ID of the animation you want to detect
local animationId = "10469630950" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469643643" -- The ID of the animation you want to detect
local animationId = "10469643643" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)